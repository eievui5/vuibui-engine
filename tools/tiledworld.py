import argparse
import json
import os

class Room(object):
	name = ""
	path = ""
	x = 0
	y = 0

def get_height(rooms):
	lowest = 0
	highest = 0

	for room in rooms:
		if room.y < lowest:
			lowest = room.y
		elif room.y > highest:
			highest = room.y

	return abs(lowest) + abs(highest) + 1

def get_width(rooms):
	lowest = 0
	highest = 0

	for room in rooms:
		if room.x < lowest:
			lowest = room.x
		elif room.x > highest:
			highest = room.x

	return abs(lowest) + abs(highest) + 1

def get_room(x, y, rooms):
	for room in rooms:
		if room.x == x and room.y == y:
			return room
	return None

def __main__():
	parser = argparse.ArgumentParser()
	parser.add_argument("-o", "--output", dest = "output", type = argparse.FileType('w'), nargs = 1, required = True)
	parser.add_argument("input", type = argparse.FileType('r'), nargs = 1, help = "Input .world file.")

	args = parser.parse_args()
	infile = args.input[0]
	map_name = os.path.basename(infile.name).split('.', 1)[0].capitalize()
	outfile = args.output[0]
	rooms = []

	for room in json.loads(infile.read())["maps"]:
		new_room = Room()
		new_room.path = room["fileName"]
		new_room.name = os.path.basename(new_room.path).split('.', 1)[0].capitalize()
		new_room.x = room["x"] // 256
		new_room.y = room["y"] // 256
		rooms.append(new_room)

	# Prepare world structure.
	outfile.write(
f"""; Generated by tiledworld.py for using in VuiBui engine.
SECTION \"{map_name} World Map\", ROMX
x{map_name}:
    define_map \\
	    {get_width(rooms)}, {get_width(rooms) * get_height(rooms)}, \\ ; Width, Size
		null, \\ ; Tileset - TODO
		null, \\ ; Palettes - TODO
		null, \\ ; Metatile data - TODO
.map"""
)

	# Output room matrix.
	for y in range(get_height(rooms)):
		outfile.write("\n    DW ")
		for x in range(get_width(rooms)):
			room = get_room(x, y, rooms)

			if room is None:
				outfile.write("null, ")
			else:
				outfile.write(f"{room.name}, ")

	# In the future, a flag could be included which searches for a script file
	# under the same name as the room file and includes it, allowing finer
	# control over the room script.
	# Assert that the user places room data after this.
	outfile.write("\n\nASSERT @ == .data, \"You must include room data after the world map.\"")


if __name__ == "__main__":
	__main__()